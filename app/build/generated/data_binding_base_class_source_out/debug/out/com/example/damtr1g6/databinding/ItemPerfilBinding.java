// Generated by view binder compiler. Do not edit!
package com.example.damtr1g6.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.damtr1g6.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemPerfilBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText editTextEmail;

  @NonNull
  public final EditText editTextPasswd;

  @NonNull
  public final EditText editTextRol;

  @NonNull
  public final EditText editTextTarjeta;

  @NonNull
  public final EditText editTextUsuario;

  private ItemPerfilBinding(@NonNull LinearLayout rootView, @NonNull EditText editTextEmail,
      @NonNull EditText editTextPasswd, @NonNull EditText editTextRol,
      @NonNull EditText editTextTarjeta, @NonNull EditText editTextUsuario) {
    this.rootView = rootView;
    this.editTextEmail = editTextEmail;
    this.editTextPasswd = editTextPasswd;
    this.editTextRol = editTextRol;
    this.editTextTarjeta = editTextTarjeta;
    this.editTextUsuario = editTextUsuario;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemPerfilBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemPerfilBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_perfil, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemPerfilBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.editTextEmail;
      EditText editTextEmail = ViewBindings.findChildViewById(rootView, id);
      if (editTextEmail == null) {
        break missingId;
      }

      id = R.id.editTextPasswd;
      EditText editTextPasswd = ViewBindings.findChildViewById(rootView, id);
      if (editTextPasswd == null) {
        break missingId;
      }

      id = R.id.editTextRol;
      EditText editTextRol = ViewBindings.findChildViewById(rootView, id);
      if (editTextRol == null) {
        break missingId;
      }

      id = R.id.editTextTarjeta;
      EditText editTextTarjeta = ViewBindings.findChildViewById(rootView, id);
      if (editTextTarjeta == null) {
        break missingId;
      }

      id = R.id.editTextUsuario;
      EditText editTextUsuario = ViewBindings.findChildViewById(rootView, id);
      if (editTextUsuario == null) {
        break missingId;
      }

      return new ItemPerfilBinding((LinearLayout) rootView, editTextEmail, editTextPasswd,
          editTextRol, editTextTarjeta, editTextUsuario);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
